<?xml version="1.0"?>
<document>

  <properties>
    <title>Tasks</title>
    <author email="Jeff.Brekke@qg.com">Jeffrey D. Brekke</author>
  </properties>

  <body>
    <section name="Tasks">
      <p>
        <ul>
          <li>
            Convert code to specified coding standards.  Use checkstyle once
            it is integrated into Maven.
          </li>
          <li>
            Evaluate/Integrate existing file list parsing patch from Steve Cohen.
            <ul>
              <li>
                <a href="http://groups.yahoo.com/group/devel-netcomponents/files/NetComponents-1.3.8a-src.tar.gz">
                Patch</a>
              </li>
              <li>
                <a href="http://groups.yahoo.com/group/devel-netcomponents/message/85">Description</a>
              </li>
            </ul>
          </li>
          <li>
            Clean out any classes that don't belong in this project.  Probably classes from
            org.apache.commons.util and org.apache.commons.io could be moved to their corresponding
            commons projects.
          </li>
          <li>
            Create proposal documents for the project.
          </li>
          <li>
            DefaultFTPFileLister doesn't work with every FTP server. 
            Some Microsoft and VMS FTP servers foil it. It is also 
            wasteful of memory in that it parses the listing into a
            complete set of FTPFile instances when it could store the 
            listing and just parse the listing on demand through an 
            iterator. An FTPFileListParser implementation should be 
            created that is backed by the original listing and iterates 
            through it using a regular expression. Regular expressions 
            could be installed based on FTP server system id's, so when 
            a user runs across an unsupported server, he can register a 
            regular expression rather than create a completely new 
            hand-parsed FTPFileLister implementation. ( Partially implemented
            by patch listed above )
          </li>
          <li>
            Make buffer size settable for FTP data transfers using 
            retrieveFile(). retrieveFile() uses Util.copyStream and a 
            1024 byte buffer which is too small for some applications 
            (Solaris SMP).
          </li>
          <li>
            Divorce FTPClient from TelnetClient, getting rid of the 
            TelnetClient threads which cause problems on some platforms 
            (e.g., MacOS).
          </li>
          <li>
            Parse the client/server interactions without creating so many 
            strings. Many operations are slow because of this.
          </li>
          <li>
            Add ESMTP and extended NNTP commands (e.g., NNTP authentication).
          </li>
          <li>
            Make NNTPClient.listNewsgropus() and NNTPClient.listNewNews() 
            more efficient. Don't preparse into lots of little objects.
          </li>
          <li>
            TLS for FTP
          </li>
        </ul>
      </p>
    </section>
  </body>
</document>
